@using System.Security.Claims
@using MallManagment.Web.Providers;
@inject AuthenticationStateProvider authStateProvider
@inject ITokenManagerService tokenService
<AuthorizeView>
    <Authorized>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="auth/settings">Welcome : @email</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="LogoutAsync">Log out</MudButton>
    </Authorized>
    <NotAuthorized>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="auth/login">Log in</MudButton>
    </NotAuthorized>
</AuthorizeView>
@code {
    private string? email { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var auth = (await authStateProvider.GetAuthenticationStateAsync()).User;
        
        if (auth != null && auth.Identity!.IsAuthenticated)
        {
            email = auth.Claims.First(a => a.Type == ClaimTypes.Email).Value;
        }
    }
    async Task LogoutAsync()
    {
        await tokenService.RemoveAuth();
        
        ((AuthStateProvider)authStateProvider).Notify();

        navManager.NavigateTo("/", true);
    }
}